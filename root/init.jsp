<%@ page import="java.sql.*" %>
<%!
	private Connection conn = null;

	private String getRndPassword() {
		// Dont want to make things too easy ;)
		StringBuffer sb = new StringBuffer();
		int passwordSize = 5 + (int)(Math.random() * 10);
		for (int i = 0; i < passwordSize; i++) {
			int start = Character.valueOf('0').charValue();
			int end = Character.valueOf('z').charValue();
			int charValue = start + (int)(Math.random() * (end - start));
				sb.append((char)charValue);
		}
	    return sb.toString();
	}

	private String getRndDesc() {
		StringBuffer sb = new StringBuffer();
		int sentanceSize = 1 +  (int)(Math.random() * 4);
		for (int i = 0; i < sentanceSize; i++) {
			addRndSentance(sb);
		}

		return sb.toString();
	}

	private void addRndSentance(StringBuffer sb) {

		int wordSize = 4 +  (int)(Math.random() * 20);
		addRndWord(sb, true);
		for (int i = 0; i < wordSize; i++) {
			sb.append(" ");
			addRndWord(sb, false);
		}
		sb.append(". ");
	}

	private void addRndWord(StringBuffer sb, boolean capitalise) {
		// Just rubbish ;)
		int wordSize = (int)(Math.random() * 8);
		for (int i = 0; i < wordSize; i++) {
			int start = Character.valueOf('a').charValue();
			int end = Character.valueOf('z').charValue();
			if (capitalise && i == 0) {
	    		start = Character.valueOf('A').charValue();
	    		end = Character.valueOf('Z').charValue();
			}
			int charValue = start + (int)(Math.random() * (end - start));
				sb.append((char)charValue);
		}
	}

	public void jspInit() {
        getServletContext().log("InitServlet init TheBodgeItStore :)");

    	Connection c = null;
    	try {
    		// Get hold of the JDBC driver
    		Class.forName("org.hsqldb.jdbcDriver" );
    	} catch (Exception e) {
    		getServletContext().log("ERROR: failed to load HSQLDB JDBC driver: " + e);
    		return;
    	}
    	try {
    		// Establish a connection to an in memory db
    		c = DriverManager.getConnection("jdbc:hsqldb:mem:SQL", "sa", "");
    	} catch (Exception e) {
    		getServletContext().log("ERROR: failed to make a connection to the db: " + e);
    		return;
    	}

    	try {
			ResultSet rs = c.getMetaData().getColumns(null, null, "Products", "NAME");
			if (!rs.next()) {
				// Create the schema

				// Product type table
				c.prepareStatement("CREATE CACHED TABLE ProductTypes (" +
						"typeid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"type varchar(50) NOT NULL, " +
						"CONSTRAINT UNIQUE_ProductTypes_type UNIQUE (type) )").execute();

				c.prepareStatement("INSERT INTO ProductTypes (type) VALUES ('Pants')").execute();
				c.prepareStatement("INSERT INTO ProductTypes (type) VALUES ('Toys')").execute();
				c.prepareStatement("INSERT INTO ProductTypes (type) VALUES ('Phones')").execute();
				c.prepareStatement("INSERT INTO ProductTypes (type) VALUES ('Cars')").execute();
				c.prepareStatement("INSERT INTO ProductTypes (type) VALUES ('Kitchen')").execute();
				c.prepareStatement("INSERT INTO ProductTypes (type) VALUES ('Shoes')").execute();
				c.prepareStatement("INSERT INTO ProductTypes (type) VALUES ('Sport')").execute();

				// Products table
				c.prepareStatement("CREATE CACHED TABLE Products (" +
						"productid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"product varchar(50) NOT NULL, desc varchar(5000) NOT NULL, typeid INTEGER NOT NULL, price decimal NOT NULL, " +
						"CONSTRAINT UNIQUE_Products_product UNIQUE (product) )").execute();

				// Load the product data (yes, we could use parameters, but this is possibly a bit clearer ;)
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Small Pant', '" + getRndDesc() + "', 1, 20.99)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('XXXL Pant', '" + getRndDesc() + "', 1, 48.5)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Shorts', '" + getRndDesc() + "', 1, 8.99)").execute();

				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('iPhone', '" + getRndDesc() + "', 2, 27.9)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('iPad', '" + getRndDesc() + "', 2, 99.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Stuffed Animal', '" + getRndDesc() + "', 2, 14.8)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Puzzle', '" + getRndDesc() + "', 2, 6.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('XBox 360', '" + getRndDesc() + "', 2, 299.0)").execute();

				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Samsung E1200', '" + getRndDesc() + "', 3, 89.7)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('iPhone 6', '" + getRndDesc() + "', 3, 999.9)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Audioline', '" + getRndDesc() + "', 3, 69.8)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Galaxy S6', '" + getRndDesc() + "', 3, 399.4)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Siemens T5A6', '" + getRndDesc() + "', 3, 89.9)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Apple Watch', '" + getRndDesc() + "', 3, 655.99)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Nokia C02', '" + getRndDesc() + "', 3, 52.6)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Beafon S33', '" + getRndDesc() + "', 3, 31.5)").execute();

				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Renault Clio 2.0', '" + getRndDesc() + "', 4, 22396.17)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Audi A12', '" + getRndDesc() + "', 4, 14444.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Mercedes AKW', '" + getRndDesc() + "', 4, 89000.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('BMW 3.5u6', '" + getRndDesc() + "', 4, 56300.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('VW Phaeton', '" + getRndDesc() + "', 4, 175000.0)").execute();

				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Stove', '" + getRndDesc() + "', 5, 290.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Pan', '" + getRndDesc() + "', 5, 69.9)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Fridge', '" + getRndDesc() + "', 5, 690.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Knife', '" + getRndDesc() + "', 5, 199.89)").execute();

				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Boots', '" + getRndDesc() + "', 6, 199.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Sandals', '" + getRndDesc() + "', 6, 20.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Normal Shoes', '" + getRndDesc() + "', 6, 70.0)").execute();

				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Canoe', '" + getRndDesc() + "', 7, 1200.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Plane', '" + getRndDesc() + "', 7, 190000.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('Rocket', '" + getRndDesc() + "', 7, 40000000.0)").execute();
				c.prepareStatement("INSERT INTO Products (product, desc, typeid, price) VALUES ('N(A)SA Satellite', '" + getRndDesc() + "', 7, 35000000.0)").execute();

				// Users table
				c.prepareStatement("CREATE CACHED TABLE Users (" +
						"userid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"name varchar(100) NOT NULL, type varchar(10) NOT NULL, password varchar(30) NOT NULL," +
						"currentbasketid INTEGER NULL, CONSTRAINT UNIQUE_Users_name UNIQUE (name) )").execute();

				// Load the user data
				c.prepareStatement("INSERT INTO Users (name, type, password) VALUES ('user1@thebodgeitstore.com', 'USER', '" + getRndPassword() + "')").execute();
				c.prepareStatement("INSERT INTO Users (name, type, password) VALUES ('admin@thebodgeitstore.com', 'ADMIN', '" + getRndPassword() + "')").execute();
				c.prepareStatement("INSERT INTO Users (name, type, password, currentbasketid) VALUES ('test@thebodgeitstore.com', 'USER', 'password', 1)").execute(); // Ok, so this one is easy:)

				// Baskets table
				c.prepareStatement("CREATE CACHED TABLE Baskets (" +
						"basketid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, userid INTEGER NULL)").execute();

				c.prepareStatement("INSERT INTO Baskets (userid) VALUES (3)").execute();

				// Basket Contents table
				c.prepareStatement("CREATE CACHED TABLE BasketContents (" +
						"bcid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"basketid INTEGER NOT NULL, productid INTEGER NOT NULL, quantity INTEGER NOT NULL, pricetopay decimal NOT NULL" +
						" )").execute();

				c.prepareStatement("INSERT INTO BasketContents (basketid, productid, quantity, pricetopay) VALUES (1, 1, 1, 1.1)").execute();
				c.prepareStatement("INSERT INTO BasketContents (basketid, productid, quantity, pricetopay) VALUES (1, 3, 2, 2.1)").execute();
				c.prepareStatement("INSERT INTO BasketContents (basketid, productid, quantity, pricetopay) VALUES (1, 5, 3, 1.5)").execute();
				c.prepareStatement("INSERT INTO BasketContents (basketid, productid, quantity, pricetopay) VALUES (1, 7, 4, 0.95)").execute();

				//Order Table
				c.prepareStatement("CREATE CACHED TABLE Orders(" +
						"orderid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, userid INTEGER NOT NULL" +
				")").execute();

				// Order Contents table
				c.prepareStatement("CREATE CACHED TABLE OrderContents (" +
						"ocid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"orderid INTEGER NOT NULL, productid INTEGER NOT NULL, quantity INTEGER NOT NULL, pricetopay decimal NOT NULL" +
						" )").execute();

				// Comments table
				c.prepareStatement("CREATE CACHED TABLE Comments (" +
						"commentid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"name varchar(100) NULL, " +
						"comment varchar(5000) NOT NULL, " +
						"userid INTEGER NULL )").execute();

                                //Used to identify a successful SQL Injection returning table names.
                                c.prepareStatement("CREATE CACHED TABLE f0ecfb32e56d3845f140e5c81a81363ce61d9d50 (" +
						"GOOD_JOB varchar(2) NULL)").execute();



				// Scoring table
				c.prepareStatement("CREATE CACHED TABLE Score (" +
						"scoreid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
						"task varchar(30) NOT NULL, " +
						"description varchar(300) NOT NULL, " +
						"status INTEGER NOT NULL, " +
						"CONSTRAINT UNIQUE_Score_label UNIQUE (task) )").execute();

				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('LOGIN_TEST', 'Login as test@thebodgeitstore.com', 0)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('LOGIN_USER1', 'Login as user1@thebodgeitstore.com', 0)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('LOGIN_ADMIN', 'Login as admin@thebodgeitstore.com', 0)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('HIDDEN_ADMIN', 'Find hidden content as a non admin user', 0)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('HIDDEN_DEBUG', 'Find diagnostic data', 0)").execute();
                                c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('SIMPLE_XSS', 'Level 1: Display a popup using: &lt;script&gt;alert(\"XSS\")&lt;/script&gt;', 0)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('XSS_USER', 'Level 2: Display a popup using: &lt;script&gt;alert(\"XSS\")&lt;/script&gt;', 0)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('XSS_LOGIN', 'Level 3: Display a popup using: &lt;script&gt;alert(\"XSS\")&lt;/script&gt;', 0)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('OTHER_BASKET', 'Access someone elses basket', -1)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('CSRF_BASKET', 'Force someone to add an item to their basket when they visit your webpage.', 0)").execute();
                c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('CSRF_ORDER', 'Force someone to order some expensive stuff when they visit your webpage.', 0)").execute();
                                c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('NEG_BASKET', 'Get the store to owe you money', 0)").execute();
				c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('PASSWD_GET', 'Change your password via a GET request', 0)").execute();
                                c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('AES_XSS', 'Conquer AES encryption, and display a popup using: &lt;script&gt;alert(\"H@cked A3S\")&lt;/script&gt;', 0)").execute();
                                c.prepareStatement("INSERT INTO Score (task, description, status) VALUES ('AES_SQLI', 'Conquer AES encryption and append a list of table names to the normal results.', 0)").execute();



			}
			rs.close();
		} catch (SQLException e) {
    		getServletContext().log("ERROR: failed to create the schema or data: " + e);
		} finally {
			try {
				c.close();
			} catch (Exception e) {

			}
		}

	}

	public void jspDestroy() {
	}
%>
